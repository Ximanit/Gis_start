{"typescript":{"Evented":{"documentation":{"contents":["<p>Event emitter</p>\n"],"contentsRaw":"Event emitter","metadata":{}},"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Evented","methods":[{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"M[K]"}],"returnType":"this","type":"(type: K, data?: M[K]) => this"}]},{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: M[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: M[K]) => void) => this"}]},{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: M[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: M[K]) => void) => this"}]},{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: M[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: M[K]) => void) => this"}]}],"properties":[],"accessors":[],"constructorType":{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"fileName":"src/evented.ts","kind":"signature","name":"new Evented","parameters":[],"returnType":"Evented","type":"() => Evented"}]}},"Clusterer":{"documentation":{"contents":["<p>A class that provides markers clustering functionality.</p>\n"],"contentsRaw":"A class that provides markers clustering functionality.","metadata":{}},"fileName":"src/clusterer.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Clusterer","extends":["Evented<ClustererEventTable>"],"methods":[{"fileName":"src/clusterer.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the clusterer.</p>\n"],"contentsRaw":"Destroys the clusterer.","metadata":{}},"fileName":"src/clusterer.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","inheritedFrom":"Evented.emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"ClustererEventTable[K]"}],"returnType":"this","type":"(type: K, data?: ClustererEventTable[K]) => this"}]},{"fileName":"src/clusterer.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getClusterExpansionZoom","signatures":[{"documentation":{"contents":["<p>Returns the zoom at which the cluster expands into markers.</p>\n"],"contentsRaw":"Returns the zoom at which the cluster expands into markers.","metadata":{}},"fileName":"src/clusterer.ts","kind":"signature","name":"getClusterExpansionZoom","parameters":[{"documentation":{"contents":["<p>Cluster identifier. Can be obtained from cluster mouse events in <code>ClusterTarget</code>.</p>\n"],"contentsRaw":"Cluster identifier. Can be obtained from cluster mouse events in `ClusterTarget`.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"clusterId","type":"number"}],"returnType":"any","type":"(clusterId: number) => any"}]},{"fileName":"src/clusterer.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"load","signatures":[{"documentation":{"contents":["<p>Loads markers to clusterer.</p>\n"],"contentsRaw":"Loads markers to clusterer.","metadata":{}},"fileName":"src/clusterer.ts","kind":"signature","name":"load","parameters":[{"documentation":{"contents":["<p>An array of markers.</p>\n"],"contentsRaw":"An array of markers.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"input","type":"InputMarker[]"}],"returnType":"void","type":"(input: InputMarker[]) => void"}]},{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","inheritedFrom":"Evented.off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: ClustererEventTable[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: ClustererEventTable[K]) => void) => this"}]},{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","inheritedFrom":"Evented.on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: ClustererEventTable[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: ClustererEventTable[K]) => void) => this"}]},{"fileName":"src/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","inheritedFrom":"Evented.once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: ClustererEventTable[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: ClustererEventTable[K]) => void) => this"}]},{"fileName":"src/clusterer.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"resetClusterStyle","signatures":[{"documentation":{"contents":["<p>Resets the cluster style by its ID to to the one set in the options.</p>\n"],"contentsRaw":"Resets the cluster style by its ID to to the one set in the options.","metadata":{}},"fileName":"src/clusterer.ts","kind":"signature","name":"resetClusterStyle","parameters":[{"documentation":{"contents":["<p>Cluster identifier. The same parameter as in setClusterStyle method.</p>\n"],"contentsRaw":"Cluster identifier. The same parameter as in setClusterStyle method.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"clusterId","type":"number"}],"returnType":"void","type":"(clusterId: number) => void"}]},{"fileName":"src/clusterer.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setClusterStyle","signatures":[{"documentation":{"contents":["<p>Changes the cluster style by its ID</p>\n"],"contentsRaw":"Changes the cluster style by its ID","metadata":{}},"fileName":"src/clusterer.ts","kind":"signature","name":"setClusterStyle","parameters":[{"documentation":{"contents":["<p>Cluster identifier. Can be obtained from cluster mouse events in <code>ClusterTarget</code>.</p>\n"],"contentsRaw":"Cluster identifier. Can be obtained from cluster mouse events in `ClusterTarget`.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"clusterId","type":"number"},{"documentation":{"contents":["<p>An object or a function that returns style for the cluster.</p>\n"],"contentsRaw":"An object or a function that returns style for the cluster.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"clusterStyle","type":"(pointsCount: number, target: ClusterTarget) => ClusterStyle | ClusterStyle"}],"returnType":"void","type":"(clusterId: number, clusterStyle: (pointsCount: number, target: ClusterTarget) => ClusterStyle | ClusterStyle) => void"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const clusterer = new mapgl.Clusterer(map, {\n    radius: 60\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst clusterer = new mapgl.Clusterer(map, {\n    radius: 60\n});\n```","metadata":{}},"fileName":"src/clusterer.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const clusterer = new mapgl.Clusterer(map, {\n    radius: 60\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst clusterer = new mapgl.Clusterer(map, {\n    radius: 60\n});\n```","metadata":{}},"fileName":"src/clusterer.ts","kind":"signature","name":"new Clusterer","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"mapgl.Map"},{"documentation":{"contents":["<p>Clusterer initialization options.</p>\n"],"contentsRaw":"Clusterer initialization options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"userOptions","defaultValue":"{}","type":"ClustererOptions"}],"returnType":"Clusterer","type":"(map: mapgl.Map, userOptions?: ClustererOptions) => Clusterer"}]}},"HtmlInputMarker":{"documentation":{"contents":["<p>Marker style for HTML marker</p>\n"],"contentsRaw":"Marker style for HTML marker","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"HtmlInputMarker","indexSignature":{"documentation":{"contents":["<p>Any specific data.</p>\n"],"contentsRaw":"Any specific data.","metadata":{}},"fileName":"src/types.ts","kind":"signature","name":"__index","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"key","type":"string"}],"returnType":"any","type":"{ [key: string]: any }"},"methods":[],"properties":[{"documentation":{"contents":["<p>The position in pixels of the &quot;tip&quot; of the HTML marker relative to its top-left corner.</p>\n"],"contentsRaw":"The position in pixels of the \"tip\" of the HTML marker relative to its top-left corner.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Geographical coordinates of marker center <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"Geographical coordinates of marker center `[longitude, latitude]`.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[]"},{"documentation":{"contents":["<p>HTML content of the HTML marker.</p>\n"],"contentsRaw":"HTML content of the HTML marker.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"html","type":"HTMLElement | string"},{"documentation":{"contents":["<p>Maximum display zoom level of the HTML marker.</p>\n"],"contentsRaw":"Maximum display zoom level of the HTML marker.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display zoom level of the HTML marker.</p>\n"],"contentsRaw":"Minimum display zoom level of the HTML marker.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Capture events if set, otherwise events will passed to the map. Use this setting if you want to\ndisable map zoom/scroll over html marker. By default it&#39;s <code>true</code>.</p>\n"],"contentsRaw":"Capture events if set, otherwise events will passed to the map. Use this setting if you want to\ndisable map zoom/scroll over html marker. By default it's `true`.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"preventMapInteractions","defaultValue":"true","type":"undefined | false | true"},{"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"type","type":"\"html\""},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"WebglInputMarker":{"documentation":{"contents":["<p>Marker style for MapGL marker.</p>\n"],"contentsRaw":"Marker style for MapGL marker.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"WebglInputMarker","indexSignature":{"documentation":{"contents":["<p>Any specific data.</p>\n"],"contentsRaw":"Any specific data.","metadata":{}},"fileName":"src/types.ts","kind":"signature","name":"__index","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"key","type":"string"}],"returnType":"any","type":"{ [key: string]: any }"},"methods":[],"properties":[{"documentation":{"contents":["<p>The position of the &quot;tip&quot; of the icon (relative to its top left corner).\nThe icon will be aligned so that this point is at the marker&#39;s geographical location.\nCentered by default if anchor is not specified and custom icon is provided.</p>\n"],"contentsRaw":"The position of the \"tip\" of the icon (relative to its top left corner).\nThe icon will be aligned so that this point is at the marker's geographical location.\nCentered by default if anchor is not specified and custom icon is provided.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Geographical coordinates of marker center <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"Geographical coordinates of marker center `[longitude, latitude]`.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[]"},{"documentation":{"contents":["<p>Marker icon anchor in hovered state.</p>\n"],"contentsRaw":"Marker icon anchor in hovered state.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverAnchor","type":"number[]"},{"documentation":{"contents":["<p>Marker icon URL in hovered state.</p>\n"],"contentsRaw":"Marker icon URL in hovered state.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverIcon","type":"undefined | string"},{"documentation":{"contents":["<p>Marker icon size <code>[width, height]</code> in pixels in hovered state.</p>\n"],"contentsRaw":"Marker icon size `[width, height]` in pixels in hovered state.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverSize","type":"number[]"},{"documentation":{"contents":["<p>Marker icon URL.</p>\n"],"contentsRaw":"Marker icon URL.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"icon","type":"undefined | string"},{"documentation":{"contents":["<p>Initialization options of the marker&#39;s label.</p>\n"],"contentsRaw":"Initialization options of the marker's label.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"label","type":"InputMarkerLabelOptions"},{"documentation":{"contents":["<p>Marker icon size <code>[width, height]</code> in pixels.</p>\n"],"contentsRaw":"Marker icon size `[width, height]` in pixels.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"size","type":"number[]"},{"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"type","type":"undefined | \"webgl\""},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"InputMarkerLabelOptions":{"documentation":{"contents":["<p>Initialization options of the marker&#39;s label.</p>\n"],"contentsRaw":"Initialization options of the marker's label.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"InputMarkerLabelOptions","methods":[],"properties":[{"documentation":{"contents":["<p>The offset distance of text box from its <code>relativeAnchor</code>.\nPositive values indicate left and up, while negative values indicate right and down.</p>\n<p>DEPRECATED! Will be removed in the next major release, use the <code>offset</code> option instead.</p>\n"],"contentsRaw":"The offset distance of text box from its `relativeAnchor`.\nPositive values indicate left and up, while negative values indicate right and down.\n\nDEPRECATED! Will be removed in the next major release, use the `offset` option instead.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Text color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Text color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color","type":"undefined | string"},{"documentation":{"contents":["<p>Text size.</p>\n"],"contentsRaw":"Text size.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"fontSize","type":"undefined | number"},{"documentation":{"contents":["<p>Color of letters background (when <code>haloRadius</code> is specified). Same format as for <code>color</code>.</p>\n"],"contentsRaw":"Color of letters background (when `haloRadius` is specified). Same format as for `color`.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"haloColor","type":"undefined | string"},{"documentation":{"contents":["<p>Use <code>haloRadius</code> to add background behind each letter.</p>\n"],"contentsRaw":"Use `haloRadius` to add background behind each letter.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"haloRadius","type":"undefined | number"},{"documentation":{"contents":["<p>Space between each letter.</p>\n"],"contentsRaw":"Space between each letter.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"letterSpacing","type":"undefined | number"},{"documentation":{"contents":["<p>For multiline label <code>lineHeight</code> specify how far lines between each other.</p>\n"],"contentsRaw":"For multiline label `lineHeight` specify how far lines between each other.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lineHeight","type":"undefined | number"},{"documentation":{"contents":["<p>Maximum display zoom level of the label.</p>\n"],"contentsRaw":"Maximum display zoom level of the label.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display zoom level of the label.</p>\n"],"contentsRaw":"Minimum display zoom level of the label.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>The offset distance of text box from its <code>relativeAnchor</code>.\nPositive values indicate right and down, while negative values indicate left and up.</p>\n"],"contentsRaw":"The offset distance of text box from its `relativeAnchor`.\nPositive values indicate right and down, while negative values indicate left and up.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"offset","type":"number[]"},{"documentation":{"contents":["<p>The relative, from 0 to 1 in each dimension, coordinates of the text box &quot;tip&quot;. relative to its top left corner, for example:\n[0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.\nThe label will be placed so that this point is at geographical <code>coordinates</code> respects the absolute <code>offset</code>.</p>\n"],"contentsRaw":"The relative, from 0 to 1 in each dimension, coordinates of the text box \"tip\". relative to its top left corner, for example:\n[0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.\nThe label will be placed so that this point is at geographical `coordinates` respects the absolute `offset`.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"relativeAnchor","type":"number[]"},{"documentation":{"contents":["<p>Label&#39;s text.</p>\n"],"contentsRaw":"Label's text.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"text","type":"string"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"MarkerTarget":{"documentation":{"contents":["<p>Marker event target.</p>\n"],"contentsRaw":"Marker event target.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MarkerTarget","methods":[],"properties":[{"documentation":{"contents":["<p>The targeted marker.</p>\n"],"contentsRaw":"The targeted marker.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"data","type":"InputMarker"},{"documentation":{"contents":["<p>Type of the target.</p>\n"],"contentsRaw":"Type of the target.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"type","type":"\"marker\""},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}]},"ClusterTarget":{"documentation":{"contents":["<p>Cluster event target.</p>\n"],"contentsRaw":"Cluster event target.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"ClusterTarget","methods":[],"properties":[{"documentation":{"contents":["<p>Markers contained in the targeted cluster.</p>\n"],"contentsRaw":"Markers contained in the targeted cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"data","type":"InputMarker[]"},{"documentation":{"contents":["<p>Cluster identifier.</p>\n"],"contentsRaw":"Cluster identifier.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"id","type":"number"},{"documentation":{"contents":["<p>Type of the target.</p>\n"],"contentsRaw":"Type of the target.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"type","type":"\"cluster\""},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}]},"ClustererPointerEvent":{"documentation":{"contents":["<p>The event type for pointer-related clusterer events.</p>\n"],"contentsRaw":"The event type for pointer-related clusterer events.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"ClustererPointerEvent","methods":[],"properties":[{"documentation":{"contents":["<p>Geographical coordinates of the event.</p>\n"],"contentsRaw":"Geographical coordinates of the event.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lngLat","type":"number[]"},{"documentation":{"contents":["<p>The original DOM event.</p>\n"],"contentsRaw":"The original DOM event.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"originalEvent","type":"MouseEvent | TouchEvent"},{"documentation":{"contents":["<p>Screen coordinates of the event.</p>\n"],"contentsRaw":"Screen coordinates of the event.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"point","type":"number[]"},{"documentation":{"contents":["<p>Target (a marker or a cluster) of the event.</p>\n"],"contentsRaw":"Target (a marker or a cluster) of the event.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"target","type":"MarkerTarget | ClusterTarget"}]},"ClustererOptions":{"documentation":{"contents":["<p>Clusterer initialization options.</p>\n"],"contentsRaw":"Clusterer initialization options.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"ClustererOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Style of clusters.\nThis parameter accepts an object or a function.\nWhen given an object, the same style will be applied to all clusters.\nIf you want to customize the style based on the number of markers within the cluster, you can provide a function instead.</p>\n"],"contentsRaw":"Style of clusters.\nThis parameter accepts an object or a function.\nWhen given an object, the same style will be applied to all clusters.\nIf you want to customize the style based on the number of markers within the cluster, you can provide a function instead.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"clusterStyle","type":"(pointsCount: number, target: ClusterTarget) => ClusterStyle | ClusterStyle"},{"documentation":{"contents":["<p>At this zoom level and above, markers will not be clustered.</p>\n"],"contentsRaw":"At this zoom level and above, markers will not be clustered.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"disableClusteringAtZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Clustering radius in pixels.</p>\n"],"contentsRaw":"Clustering radius in pixels.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"radius","type":"undefined | number"}]},"ClustererEventTable":{"documentation":{"contents":["<p>The list of events that can be emitted by clusterer.</p>\n"],"contentsRaw":"The list of events that can be emitted by clusterer.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"ClustererEventTable","methods":[],"properties":[{"documentation":{"contents":["<p>Emitted when the marker/cluster is clicked.</p>\n"],"contentsRaw":"Emitted when the marker/cluster is clicked.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"click","type":"ClustererPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user presses a mouse button over the marker/cluster.</p>\n"],"contentsRaw":"Emitted when the user presses a mouse button over the marker/cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mousedown","type":"ClustererPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user moves the pointer over the marker/cluster.</p>\n"],"contentsRaw":"Emitted when the user moves the pointer over the marker/cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mousemove","type":"ClustererPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user moves the pointer away from the marker/cluster.</p>\n"],"contentsRaw":"Emitted when the user moves the pointer away from the marker/cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseout","type":"ClustererPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user hovers over the marker/cluster.</p>\n"],"contentsRaw":"Emitted when the user hovers over the marker/cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseover","type":"ClustererPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user releases the mouse button over the marker/cluster.</p>\n"],"contentsRaw":"Emitted when the user releases the mouse button over the marker/cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseup","type":"ClustererPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user lifts the finger off the marker/cluster.</p>\n"],"contentsRaw":"Emitted when the user lifts the finger off the marker/cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"touchend","type":"ClustererPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user taps on the marker/cluster.</p>\n"],"contentsRaw":"Emitted when the user taps on the marker/cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"touchstart","type":"ClustererPointerEvent"}]},"HtmlClusterStyle":{"documentation":{"contents":["<p>Cluster style for HTML Marker</p>\n"],"contentsRaw":"Cluster style for HTML Marker","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"HtmlClusterStyle","methods":[],"properties":[{"documentation":{"contents":["<p>The position in pixels of the &quot;tip&quot; of the HTML marker relative to its top-left corner.</p>\n"],"contentsRaw":"The position in pixels of the \"tip\" of the HTML marker relative to its top-left corner.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>HTML content of the HTML marker.</p>\n"],"contentsRaw":"HTML content of the HTML marker.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"html","type":"HTMLElement | string"},{"documentation":{"contents":["<p>Maximum display zoom level of the HTML marker.</p>\n"],"contentsRaw":"Maximum display zoom level of the HTML marker.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display zoom level of the HTML marker.</p>\n"],"contentsRaw":"Minimum display zoom level of the HTML marker.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Capture events if set, otherwise events will passed to the map. Use this setting if you want to\ndisable map zoom/scroll over html marker. By default it&#39;s <code>true</code>.</p>\n"],"contentsRaw":"Capture events if set, otherwise events will passed to the map. Use this setting if you want to\ndisable map zoom/scroll over html marker. By default it's `true`.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"preventMapInteractions","defaultValue":"true","type":"undefined | false | true"},{"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"type","type":"\"html\""},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"WebglClusterStyle":{"documentation":{"contents":["<p>Cluster style for MapGL Marker</p>\n"],"contentsRaw":"Cluster style for MapGL Marker","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"WebglClusterStyle","methods":[],"properties":[{"documentation":{"contents":["<p>The position of the &quot;tip&quot; of the icon (relative to its top left corner).\nThe icon will be aligned so that this point is at the cluster&#39;s geographical location.\nCentered by default if anchor is not specified and custom icon is provided.</p>\n"],"contentsRaw":"The position of the \"tip\" of the icon (relative to its top left corner).\nThe icon will be aligned so that this point is at the cluster's geographical location.\nCentered by default if anchor is not specified and custom icon is provided.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Cluster icon anchor in hovered state.</p>\n"],"contentsRaw":"Cluster icon anchor in hovered state.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverAnchor","type":"number[]"},{"documentation":{"contents":["<p>Cluster icon URL in hovered state.</p>\n"],"contentsRaw":"Cluster icon URL in hovered state.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverIcon","type":"undefined | string"},{"documentation":{"contents":["<p>Cluster icon size <code>[width, height]</code> in hovered state in pixels.</p>\n"],"contentsRaw":"Cluster icon size `[width, height]` in hovered state in pixels.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverSize","type":"number[]"},{"documentation":{"contents":["<p>Cluster icon URL.</p>\n"],"contentsRaw":"Cluster icon URL.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"icon","type":"undefined | string"},{"documentation":{"contents":["<p>The offset distance of text box from its <code>relativeAnchor</code>.\nPositive values indicate left and up, while negative values indicate right and down.</p>\n<p>DEPRECATED! Will be removed in the next major release, use the <code>offset</code> option instead.</p>\n"],"contentsRaw":"The offset distance of text box from its `relativeAnchor`.\nPositive values indicate left and up, while negative values indicate right and down.\n\nDEPRECATED! Will be removed in the next major release, use the `offset` option instead.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelAnchor","type":"number[]"},{"documentation":{"contents":["<p>Label&#39;s text color of a cluster in CSS hexadecimal RGB format (e.g. <code>#ff0000</code>).</p>\n"],"contentsRaw":"Label's text color of a cluster in CSS hexadecimal RGB format (e.g. `#ff0000`).","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelColor","type":"undefined | string"},{"documentation":{"contents":["<p>Label&#39;s text font size of a cluster.</p>\n"],"contentsRaw":"Label's text font size of a cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelFontSize","type":"undefined | number"},{"documentation":{"contents":["<p>Label&#39;s text background color of a cluster in CSS hexadecimal RGB format (e.g. <code>#ff0000</code>).</p>\n"],"contentsRaw":"Label's text background color of a cluster in CSS hexadecimal RGB format (e.g. `#ff0000`).","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelHaloColor","type":"undefined | string"},{"documentation":{"contents":["<p>Label&#39;s text background radius of a cluster.\nThe background is set for each letter of the text.</p>\n"],"contentsRaw":"Label's text background radius of a cluster.\nThe background is set for each letter of the text.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelHaloRadius","type":"undefined | number"},{"documentation":{"contents":["<p>Label&#39;s text letter spacing of a cluster.</p>\n"],"contentsRaw":"Label's text letter spacing of a cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelLetterSpacing","type":"undefined | number"},{"documentation":{"contents":["<p>The offset distance of text box from its <code>relativeAnchor</code>.\nPositive values indicate right and down, while negative values indicate left and up.</p>\n"],"contentsRaw":"The offset distance of text box from its `relativeAnchor`.\nPositive values indicate right and down, while negative values indicate left and up.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelOffset","type":"number[]"},{"documentation":{"contents":["<p>The relative, from 0 to 1 in each dimension, coordinates of the text box &quot;tip&quot;. relative to its top left corner, for example:\n[0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.\nThe label will be placed so that this point is at geographical <code>coordinates</code> respects the absolute <code>offset</code>.</p>\n"],"contentsRaw":"The relative, from 0 to 1 in each dimension, coordinates of the text box \"tip\". relative to its top left corner, for example:\n[0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.\nThe label will be placed so that this point is at geographical `coordinates` respects the absolute `offset`.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelRelativeAnchor","type":"number[]"},{"documentation":{"contents":["<p>Label&#39;s text of a cluster. By default, it&#39;s the size of the cluster.</p>\n"],"contentsRaw":"Label's text of a cluster. By default, it's the size of the cluster.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"labelText","type":"undefined | string"},{"documentation":{"contents":["<p>Cluster icon size <code>[width, height]</code> in pixels.</p>\n"],"contentsRaw":"Cluster icon size `[width, height]` in pixels.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"size","type":"number[]"},{"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"type","type":"undefined | \"webgl\""},{"documentation":{"contents":["<p>Draw Order</p>\n"],"contentsRaw":"Draw Order","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"InputMarker":{"documentation":{"contents":["<p>A marker for clustering. Marker can be represented via MapGL marker or HTML marker.</p>\n<p>MapGL markers are more performant, HTML Markers are more customizable.</p>\n"],"contentsRaw":"A marker for clustering. Marker can be represented via MapGL marker or HTML marker.\n\nMapGL markers are more performant, HTML Markers are more customizable.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"InputMarker","type":"WebglInputMarker | HtmlInputMarker"},"ClusterStyle":{"documentation":{"contents":["<p>An object describing a cluster style. Cluster can be represented via MapGL Marker or HTML Marker.</p>\n<p>MapGL markers are more performant, HTML Markers are more customizable.</p>\n"],"contentsRaw":"An object describing a cluster style. Cluster can be represented via MapGL Marker or HTML Marker.\n\nMapGL markers are more performant, HTML Markers are more customizable.","metadata":{}},"fileName":"src/types.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"ClusterStyle","type":"WebglClusterStyle | HtmlClusterStyle"}}}