import { ClustererEventTable, InputMarker, ClustererOptions, ClusterStyle, ClusterTarget } from './types';
import { Evented } from './evented';
/**
 * A class that provides markers clustering functionality.
 */
export declare class Clusterer extends Evented<ClustererEventTable> {
    /**
     * @hidden
     * @internal
     */
    private static options;
    /**
     * @hidden
     * @internal
     */
    private map;
    /**
     * @hidden
     * @internal
     */
    private options;
    /**
     * @hidden
     * @internal
     */
    private supercluster;
    /**
     * @hidden
     * @internal
     * Массив маркеров, которые передал пользователь
     */
    private inputMarkers;
    /**
     * @hidden
     * @internal
     * Хранилище для маркеров, которые уже были созданы, т.е. показаны на экране
     * Ключ маркера соответствует индексу этого маркера в массиве, который передал пользователь
     */
    private markers;
    /**
     * @hidden
     * @internal
     * Хранилище для кластеров, которые уже были созданы, т.е. показаны на экране
     * Ключ кластер соответствует ID, которые ему присваивается в процессе работы supercluster
     */
    private clusters;
    /**
     * @hidden
     * @internal
     * Вызов _updateVisibleObjects через троттлинг
     */
    private _throttleUpdateVisibleObjects;
    /**
     * Example:
     * ```js
     * const clusterer = new mapgl.Clusterer(map, {
     *     radius: 60
     * });
     * ```
     * @param map The map instance.
     * @param userOptions Clusterer initialization options.
     */
    constructor(map: mapgl.Map, userOptions?: ClustererOptions);
    /**
     * Loads markers to clusterer.
     * @param input An array of markers.
     */
    load(input: InputMarker[]): void;
    /**
     * Destroys the clusterer.
     */
    destroy(): void;
    /**
     * Changes the cluster style by its ID
     * @param clusterId Cluster identifier. Can be obtained from cluster mouse events in `ClusterTarget`.
     * @param clusterStyle An object or a function that returns style for the cluster.
     */
    setClusterStyle(clusterId: number, clusterStyle: ((pointsCount: number, target: ClusterTarget) => ClusterStyle) | ClusterStyle): void;
    /**
     * Resets the cluster style by its ID to to the one set in the options.
     * @param clusterId Cluster identifier. The same parameter as in setClusterStyle method.
     */
    resetClusterStyle(clusterId: number): void;
    /**
     * @hidden
     * @internal
     * Use it for testing only.
     */
    _dangerouslyUpdateVisibleObjects(): void;
    /**
     * Returns the zoom at which the cluster expands into markers.
     * @param clusterId Cluster identifier. Can be obtained from cluster mouse events in `ClusterTarget`.
     */
    getClusterExpansionZoom(clusterId: number): number;
    private _clear;
    private _getVisibleObjects;
    private _getBounds;
    private isMapglMarker;
    private _createMarker;
    private _createMapglMarker;
    private _bindHtmlMarkerEvents;
    private _createHtmlMarker;
    private isWebglClusterStyle;
    private _createCluster;
    private _createWebGLCluster;
    private _createHtmlCluster;
    private _updateVisibleObjects;
}
