import Supercluster from 'supercluster';
import { LabelImage } from '@2gis/mapgl/types/types';
import { Marker } from '@2gis/mapgl/types';
/**
 * A marker for clustering. Marker can be represented via MapGL marker or HTML marker.
 *
 * MapGL markers are more performant, HTML Markers are more customizable.
 */
export declare type InputMarker = WebglInputMarker | HtmlInputMarker;
/**
 * Marker style for HTML marker
 */
export interface HtmlInputMarker {
    type: 'html';
    /**
     * Geographical coordinates of marker center `[longitude, latitude]`.
     */
    coordinates: number[];
    /**
     * HTML content of the HTML marker.
     */
    html: HTMLElement | string;
    /**
     * The position in pixels of the "tip" of the HTML marker relative to its top-left corner.
     */
    anchor?: number[];
    /**
     * Minimum display zoom level of the HTML marker.
     */
    minZoom?: number;
    /**
     * Maximum display zoom level of the HTML marker.
     */
    maxZoom?: number;
    /**
     * Draw order.
     */
    zIndex?: number;
    /**
     * Capture events if set, otherwise events will passed to the map. Use this setting if you want to
     * disable map zoom/scroll over html marker. By default it's `true`.
     *
     * @default true
     */
    preventMapInteractions?: boolean;
    /**
     * User specific data.
     */
    userData?: any;
    /**
     * Any specific data.
     */
    [key: string]: any;
}
/**
 * Marker style for MapGL marker.
 */
export interface WebglInputMarker {
    type?: 'webgl';
    /**
     * Geographical coordinates of marker center `[longitude, latitude]`.
     */
    coordinates: number[];
    /**
     * Marker icon URL.
     */
    icon?: string;
    /**
     * Marker icon size `[width, height]` in pixels.
     */
    size?: number[];
    /**
     * The position of the "tip" of the icon (relative to its top left corner).
     * The icon will be aligned so that this point is at the marker's geographical location.
     * Centered by default if anchor is not specified and custom icon is provided.
     */
    anchor?: number[];
    /**
     * Marker icon URL in hovered state.
     */
    hoverIcon?: string;
    /**
     * Marker icon size `[width, height]` in pixels in hovered state.
     */
    hoverSize?: number[];
    /**
     * Marker icon anchor in hovered state.
     */
    hoverAnchor?: number[];
    /**
     * Initialization options of the marker's label.
     */
    label?: InputMarkerLabelOptions;
    /**
     * Draw order.
     */
    zIndex?: number;
    /**
     * User specific data.
     */
    userData?: any;
    /**
     * Any specific data.
     */
    [key: string]: any;
}
/**
 * @hidden
 * @internal
 */
export interface WebGLCluster {
    type: 'webgl';
    coordinates: GeoJSON.Position;
    marker: Marker;
    target: ClusterTarget;
}
/**
 * @hidden
 * @internal
 */
export interface HtmlCluster {
    type: 'html';
    coordinates: GeoJSON.Position;
    marker: HtmlClusterMarker;
    target: ClusterTarget;
}
/**
 * @hidden
 * @internal
 */
export declare type Cluster = WebGLCluster | HtmlCluster;
/**
 * @hidden
 * @internal
 */
export interface HtmlClusterMarker {
    show: () => void;
    hide: () => void;
    destroy: () => void;
    setContent: (content: HTMLElement | string) => void;
    setAnchor: (anchor: number[]) => void;
}
/**
 * Initialization options of the marker's label.
 */
export interface InputMarkerLabelOptions {
    /**
     * Label's text.
     */
    text: string;
    /**
     * @hidden
     * @internal
     * Image background for the label
     */
    image?: LabelImage;
    /**
     * Minimum display zoom level of the label.
     */
    minZoom?: number;
    /**
     * Maximum display zoom level of the label.
     */
    maxZoom?: number;
    /**
     * Text color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.
     */
    color?: string;
    /**
     * Text size.
     */
    fontSize?: number;
    /**
     * Use `haloRadius` to add background behind each letter.
     */
    haloRadius?: number;
    /**
     * Color of letters background (when `haloRadius` is specified). Same format as for `color`.
     */
    haloColor?: string;
    /**
     * Space between each letter.
     */
    letterSpacing?: number;
    /**
     * For multiline label `lineHeight` specify how far lines between each other.
     */
    lineHeight?: number;
    /**
     * The offset distance of text box from its `relativeAnchor`.
     * Positive values indicate left and up, while negative values indicate right and down.
     *
     * DEPRECATED! Will be removed in the next major release, use the `offset` option instead.
     */
    anchor?: number[];
    /**
     * The offset distance of text box from its `relativeAnchor`.
     * Positive values indicate right and down, while negative values indicate left and up.
     */
    offset?: number[];
    /**
     * The relative, from 0 to 1 in each dimension, coordinates of the text box "tip". relative to its top left corner, for example:
     * [0, 0] value is the top left corner, [0.5, 0.5] â€” center point, and [1, 1] is the bottom right corner of the box.
     * The label will be placed so that this point is at geographical `coordinates` respects the absolute `offset`.
     */
    relativeAnchor?: number[];
    /**
     * Draw order.
     */
    zIndex?: number;
}
/**
 * Marker event target.
 */
export interface MarkerTarget {
    /**
     * Type of the target.
     */
    type: 'marker';
    /**
     * The targeted marker.
     */
    data: InputMarker;
    /**
     * User specific data.
     */
    userData?: any;
}
/**
 * Cluster event target.
 */
export interface ClusterTarget {
    /**
     * Cluster identifier.
     */
    id: number;
    /**
     * Type of the target.
     */
    type: 'cluster';
    /**
     * Markers contained in the targeted cluster.
     */
    data: InputMarker[];
    /**
     * User specific data.
     */
    userData?: any;
}
/**
 * The event type for pointer-related clusterer events.
 */
export interface ClustererPointerEvent {
    /**
     * The original DOM event.
     */
    originalEvent: MouseEvent | TouchEvent;
    /**
     * Geographical coordinates of the event.
     */
    lngLat: number[];
    /**
     * Screen coordinates of the event.
     */
    point: number[];
    /**
     * Target (a marker or a cluster) of the event.
     */
    target: MarkerTarget | ClusterTarget;
}
/**
 * Clusterer initialization options.
 */
export interface ClustererOptions {
    /**
     * Clustering radius in pixels.
     */
    radius?: number;
    /**
     * Style of clusters.
     * This parameter accepts an object or a function.
     * When given an object, the same style will be applied to all clusters.
     * If you want to customize the style based on the number of markers within the cluster, you can provide a function instead.
     */
    clusterStyle?: ((pointsCount: number, target: ClusterTarget) => ClusterStyle) | ClusterStyle;
    /**
     * At this zoom level and above, markers will not be clustered.
     */
    disableClusteringAtZoom?: number;
}
/**
 * @hidden
 * @internal
 */
export interface MarkerGeoJsonProperties {
    index: number;
    cluster: false;
}
/**
 * @hidden
 * @internal
 */
export declare type PointFeature = Supercluster.PointFeature<MarkerGeoJsonProperties>;
/**
 * @hidden
 * @internal
 */
export declare type ClusterFeature = Supercluster.ClusterFeature<Supercluster.AnyProps>;
/**
 * The list of events that can be emitted by clusterer.
 */
export interface ClustererEventTable {
    /**
     * Emitted when the marker/cluster is clicked.
     */
    click: ClustererPointerEvent;
    /**
     * Emitted when the user moves the pointer over the marker/cluster.
     */
    mousemove: ClustererPointerEvent;
    /**
     * Emitted when the user hovers over the marker/cluster.
     */
    mouseover: ClustererPointerEvent;
    /**
     * Emitted when the user moves the pointer away from the marker/cluster.
     */
    mouseout: ClustererPointerEvent;
    /**
     * Emitted when the user presses a mouse button over the marker/cluster.
     */
    mousedown: ClustererPointerEvent;
    /**
     * Emitted when the user releases the mouse button over the marker/cluster.
     */
    mouseup: ClustererPointerEvent;
    /**
     * Emitted when the user taps on the marker/cluster.
     */
    touchstart: ClustererPointerEvent;
    /**
     * Emitted when the user lifts the finger off the marker/cluster.
     */
    touchend: ClustererPointerEvent;
}
/**
 * An object describing a cluster style. Cluster can be represented via MapGL Marker or HTML Marker.
 *
 * MapGL markers are more performant, HTML Markers are more customizable.
 */
export declare type ClusterStyle = WebglClusterStyle | HtmlClusterStyle;
/**
 * Cluster style for HTML Marker
 */
export interface HtmlClusterStyle {
    type: 'html';
    /**
     * HTML content of the HTML marker.
     */
    html: HTMLElement | string;
    /**
     * The position in pixels of the "tip" of the HTML marker relative to its top-left corner.
     */
    anchor?: number[];
    /**
     * Minimum display zoom level of the HTML marker.
     */
    minZoom?: number;
    /**
     * Maximum display zoom level of the HTML marker.
     */
    maxZoom?: number;
    /**
     * Draw order.
     */
    zIndex?: number;
    /**
     * Capture events if set, otherwise events will passed to the map. Use this setting if you want to
     * disable map zoom/scroll over html marker. By default it's `true`.
     *
     * @default true
     */
    preventMapInteractions?: boolean;
}
/**
 * Cluster style for MapGL Marker
 */
export interface WebglClusterStyle {
    type?: 'webgl';
    /**
     * Cluster icon URL.
     */
    icon?: string;
    /**
     * Cluster icon size `[width, height]` in pixels.
     */
    size?: number[];
    /**
     * The position of the "tip" of the icon (relative to its top left corner).
     * The icon will be aligned so that this point is at the cluster's geographical location.
     * Centered by default if anchor is not specified and custom icon is provided.
     */
    anchor?: number[];
    /**
     * Cluster icon URL in hovered state.
     */
    hoverIcon?: string;
    /**
     * Cluster icon size `[width, height]` in hovered state in pixels.
     */
    hoverSize?: number[];
    /**
     * Cluster icon anchor in hovered state.
     */
    hoverAnchor?: number[];
    /**
     * Label's text of a cluster. By default, it's the size of the cluster.
     */
    labelText?: string;
    /**
     * @hidden
     * @internal
     * Image background for the label
     */
    labelImage?: LabelImage;
    /**
     * Label's text color of a cluster in CSS hexadecimal RGB format (e.g. `#ff0000`).
     */
    labelColor?: string;
    /**
     * Label's text font size of a cluster.
     */
    labelFontSize?: number;
    /**
     * Label's text background radius of a cluster.
     * The background is set for each letter of the text.
     */
    labelHaloRadius?: number;
    /**
     * Label's text background color of a cluster in CSS hexadecimal RGB format (e.g. `#ff0000`).
     */
    labelHaloColor?: string;
    /**
     * Label's text letter spacing of a cluster.
     */
    labelLetterSpacing?: number;
    /**
     * The offset distance of text box from its `relativeAnchor`.
     * Positive values indicate left and up, while negative values indicate right and down.
     *
     * DEPRECATED! Will be removed in the next major release, use the `offset` option instead.
     */
    labelAnchor?: number[];
    /**
     * The offset distance of text box from its `relativeAnchor`.
     * Positive values indicate right and down, while negative values indicate left and up.
     */
    labelOffset?: number[];
    /**
     * Draw Order
     */
    zIndex?: number;
    /**
     * The relative, from 0 to 1 in each dimension, coordinates of the text box "tip". relative to its top left corner, for example:
     * [0, 0] value is the top left corner, [0.5, 0.5] â€” center point, and [1, 1] is the bottom right corner of the box.
     * The label will be placed so that this point is at geographical `coordinates` respects the absolute `offset`.
     */
    labelRelativeAnchor?: number[];
}
